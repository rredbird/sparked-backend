{
	"classifiers":[
		{
			"id":"org.apache.spark.ml.classification.LogisticRegression",
			"name":"LogisticRegression",
			"parameters":[
				{
					"name":"labelCol",
					"doc":"label column name"
				},
				{"name":"regParam","doc":"regularization parameter (>= 0)"},
				{"name":"featuresCol","doc":"features column name"},
				{"name":"standardization","doc":"whether to standardize the training features before fitting the model"},
				{"name":"family","doc":"The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial."},
				{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},
				{"name":"aggregationDepth","doc":"suggested depth for treeAggregate (>= 2)"},
				{"name":"fitIntercept","doc":"whether to fit an intercept term"},
				{"name":"threshold","doc":"threshold in binary classification prediction, in range [0, 1]"},
				{"name":"probabilityCol","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities"},
				{"name":"maxIter","doc":"maximum number of iterations (>= 0)"},
				{"name":"elasticNetParam","doc":"the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty"},
				{"name":"tol","doc":"the convergence tolerance for iterative algorithms (>= 0)"},
				{"name":"predictionCol","doc":"prediction column name"}
			]
		},
		{
			"id":"org.apache.spark.ml.classification.DecisionTreeClassifier",
			"name":"DecisionTreeClassifier",
			"parameters":[
				{"name":"seed","doc":"random seed"},
				{"name":"cacheNodeIds","doc":"If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees."},
				{"name":"impurity","doc":"Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini"},
				{"name":"predictionCol","doc":"prediction column name"},
				{"name":"maxDepth","doc":"Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes."},
				{"name":"checkpointInterval","doc":"set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext"},
				{"name":"labelCol","doc":"label column name"},
				{"name":"featuresCol","doc":"features column name"},
				{"name":"probabilityCol","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities"},
				{"name":"maxBins","doc":"Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature."},
				{"name":"minInstancesPerNode","doc":"Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1."},
				{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},
				{"name":"minInfoGain","doc":"Minimum information gain for a split to be considered at a tree node."},
				{"name":"maxMemoryInMB","doc":"Maximum memory in MB allocated to histogram aggregation."}
			]
		},
		{
			"id":"org.apache.spark.ml.classification.RandomForestClassifier",
			"name":"RandomForestClassifier",
			"parameters":[
				{"name":"minInfoGain","doc":"Minimum information gain for a split to be considered at a tree node."},
				{"name":"numTrees","doc":"Number of trees to train (>= 1)"},
				{"name":"predictionCol","doc":"prediction column name"},
				{"name":"checkpointInterval","doc":"set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext"},
				{"name":"maxDepth","doc":"Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes."},
				{"name":"impurity","doc":"Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini"},
				{"name":"featureSubsetStrategy","doc":"The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n]."},
				{"name":"labelCol","doc":"label column name"},{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},
				{"name":"maxBins","doc":"Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature."},
				{"name":"probabilityCol","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities"},{"name":"seed","doc":"random seed"},{"name":"subsamplingRate","doc":"Fraction of the training data used for learning each decision tree, in range (0, 1]."},{"name":"featuresCol","doc":"features column name"},{"name":"maxMemoryInMB","doc":"Maximum memory in MB allocated to histogram aggregation."},{"name":"minInstancesPerNode","doc":"Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1."},{"name":"cacheNodeIds","doc":"If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees."}
			]
		},
		{
			"id":"org.apache.spark.ml.classification.GBTClassifier",
			"name":"GBTClassifier","parameters":[
				{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},
				{"name":"minInfoGain","doc":"Minimum information gain for a split to be considered at a tree node."},{"name":"subsamplingRate","doc":"Fraction of the training data used for learning each decision tree, in range (0, 1]."},{"name":"lossType","doc":"Loss function which GBT tries to minimize (case-insensitive). Supported options: logistic"},{"name":"maxBins","doc":"Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature."},{"name":"checkpointInterval","doc":"set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext"},{"name":"maxMemoryInMB","doc":"Maximum memory in MB allocated to histogram aggregation."},{"name":"impurity","doc":"Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini"},{"name":"featureSubsetStrategy","doc":"The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n]."},{"name":"seed","doc":"random seed"},{"name":"maxIter","doc":"maximum number of iterations (>= 0)"},{"name":"cacheNodeIds","doc":"If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees."},{"name":"labelCol","doc":"label column name"},{"name":"maxDepth","doc":"Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes."},{"name":"featuresCol","doc":"features column name"},{"name":"predictionCol","doc":"prediction column name"},{"name":"stepSize","doc":"Step size (a.k.a. learning rate) in interval (0, 1] for shrinking the contribution of each estimator."},{"name":"minInstancesPerNode","doc":"Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1."},{"name":"probabilityCol","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities"}
			]
		},
		{
			"id":"org.apache.spark.ml.classification.MultilayerPerceptronClassifier",
			"name":"MultilayerPerceptronClassifier","parameters":[
				{"name":"seed","doc":"random seed"},
				{"name":"solver","doc":"The solver algorithm for optimization. Supported options: l-bfgs, gd. (Default l-bfgs)"},
				{"name":"maxIter","doc":"maximum number of iterations (>= 0)"},{"name":"tol","doc":"the convergence tolerance for iterative algorithms (>= 0)"},{"name":"predictionCol","doc":"prediction column name"},{"name":"blockSize","doc":"Block size for stacking input data in matrices. Data is stacked within partitions. If block size is more than remaining data in a partition then it is adjusted to the size of this data. Recommended size is between 10 and 1000"},{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},{"name":"labelCol","doc":"label column name"},{"name":"probabilityCol","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities"},{"name":"featuresCol","doc":"features column name"},{"name":"stepSize","doc":"Step size to be used for each iteration of optimization (> 0)"}]},{"id":"org.apache.spark.ml.classification.LinearSVC","name":"LinearSVC","parameters":[{"name":"predictionCol","doc":"prediction column name"},{"name":"tol","doc":"the convergence tolerance for iterative algorithms (>= 0)"},{"name":"featuresCol","doc":"features column name"},{"name":"fitIntercept","doc":"whether to fit an intercept term"},{"name":"labelCol","doc":"label column name"},{"name":"maxIter","doc":"maximum number of iterations (>= 0)"},{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},{"name":"aggregationDepth","doc":"suggested depth for treeAggregate (>= 2)"},{"name":"regParam","doc":"regularization parameter (>= 0)"},{"name":"threshold","doc":"threshold in binary classification prediction applied to rawPrediction"},{"name":"standardization","doc":"whether to standardize the training features before fitting the model"}
			]
		},
		{
			"id":"org.apache.spark.ml.classification.NaiveBayes","name":"NaiveBayes","parameters":[
				{"name":"rawPredictionCol","doc":"raw prediction (a.k.a. confidence) column name"},
				{"name":"smoothing","doc":"The smoothing parameter."},
				{"name":"labelCol","doc":"label column name"},
				{"name":"probabilityCol","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities"},
				{"name":"predictionCol","doc":"prediction column name"},
				{"name":"modelType","doc":"The model type which is a string (case-sensitive). Supported options: multinomial (default) and bernoulli."},
				{"name":"featuresCol","doc":"features column name"}
			]
		}
	]
}