{"classifiers":[{"id":"org.apache.spark.ml.classification.MultilayerPerceptronClassifier","name":"MultilayerPerceptronClassifier","parameters":[{"name":"stepSize","value":"0.03","doc":"Step size to be used for each iteration of optimization (> 0)","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"tol","value":"1.0E-6","doc":"the convergence tolerance for iterative algorithms (>= 0)","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"probabilityCol","value":"probability","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"solver","value":"l-bfgs","doc":"The solver algorithm for optimization. Supported options: l-bfgs, gd. (Default l-bfgs)","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"maxIter","value":"100","doc":"maximum number of iterations (>= 0)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"seed","value":"-763139545","doc":"random seed","ParamType":"org.apache.spark.ml.param.LongParam","JavaType":"java.lang.Long"},{"name":"blockSize","value":"128","doc":"Block size for stacking input data in matrices. Data is stacked within partitions. If block size is more than remaining data in a partition then it is adjusted to the size of this data. Recommended size is between 10 and 1000","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"}]},{"id":"org.apache.spark.ml.classification.LogisticRegression","name":"LogisticRegression","parameters":[{"name":"fitIntercept","value":"true","doc":"whether to fit an intercept term","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"probabilityCol","value":"probability","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"aggregationDepth","value":"2","doc":"suggested depth for treeAggregate (>= 2)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"standardization","value":"true","doc":"whether to standardize the training features before fitting the model","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"threshold","value":"0.5","doc":"threshold in binary classification prediction, in range [0, 1]","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"family","value":"auto","doc":"The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial.","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"maxIter","value":"100","doc":"maximum number of iterations (>= 0)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"tol","value":"1.0E-6","doc":"the convergence tolerance for iterative algorithms (>= 0)","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"elasticNetParam","value":"0.0","doc":"the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"regParam","value":"0.0","doc":"regularization parameter (>= 0)","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"}]},{"id":"org.apache.spark.ml.classification.RandomForestClassifier","name":"RandomForestClassifier","parameters":[{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"checkpointInterval","value":"10","doc":"set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"maxBins","value":"32","doc":"Max number of bins for discretizing continuous features. Must be >=2 and >= number of categories for any categorical feature.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"minInstancesPerNode","value":"1","doc":"Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"impurity","value":"gini","doc":"Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"numTrees","value":"20","doc":"Number of trees to train (>= 1)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"featureSubsetStrategy","value":"auto","doc":"The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n].","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"maxDepth","value":"5","doc":"Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"minInfoGain","value":"0.0","doc":"Minimum information gain for a split to be considered at a tree node.","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"cacheNodeIds","value":"false","doc":"If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"subsamplingRate","value":"1.0","doc":"Fraction of the training data used for learning each decision tree, in range (0, 1].","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"seed","value":"207336481","doc":"random seed","ParamType":"org.apache.spark.ml.param.LongParam","JavaType":"java.lang.Long"},{"name":"maxMemoryInMB","value":"256","doc":"Maximum memory in MB allocated to histogram aggregation.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"probabilityCol","value":"probability","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"}]},{"id":"org.apache.spark.ml.classification.LinearSVC","name":"LinearSVC","parameters":[{"name":"fitIntercept","value":"true","doc":"whether to fit an intercept term","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"standardization","value":"true","doc":"whether to standardize the training features before fitting the model","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"aggregationDepth","value":"2","doc":"suggested depth for treeAggregate (>= 2)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"maxIter","value":"100","doc":"maximum number of iterations (>= 0)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"regParam","value":"0.0","doc":"regularization parameter (>= 0)","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"tol","value":"1.0E-6","doc":"the convergence tolerance for iterative algorithms (>= 0)","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"threshold","value":"0.0","doc":"threshold in binary classification prediction applied to rawPrediction","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"}]},{"id":"org.apache.spark.ml.classification.DecisionTreeClassifier","name":"DecisionTreeClassifier","parameters":[{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"seed","value":"159147643","doc":"random seed","ParamType":"org.apache.spark.ml.param.LongParam","JavaType":"java.lang.Long"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"cacheNodeIds","value":"false","doc":"If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"maxBins","value":"32","doc":"Max number of bins for discretizing continuous features. Must be >=2 and >= number of categories for any categorical feature.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"maxDepth","value":"5","doc":"Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"minInstancesPerNode","value":"1","doc":"Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"impurity","value":"gini","doc":"Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"maxMemoryInMB","value":"256","doc":"Maximum memory in MB allocated to histogram aggregation.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"checkpointInterval","value":"10","doc":"set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"minInfoGain","value":"0.0","doc":"Minimum information gain for a split to be considered at a tree node.","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"probabilityCol","value":"probability","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"}]},{"id":"org.apache.spark.ml.classification.GBTClassifier","name":"GBTClassifier","parameters":[{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"subsamplingRate","value":"1.0","doc":"Fraction of the training data used for learning each decision tree, in range (0, 1].","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"stepSize","value":"0.1","doc":"Step size (a.k.a. learning rate) in interval (0, 1] for shrinking the contribution of each estimator.","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"maxBins","value":"32","doc":"Max number of bins for discretizing continuous features. Must be >=2 and >= number of categories for any categorical feature.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"probabilityCol","value":"probability","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"seed","value":"-1287390502","doc":"random seed","ParamType":"org.apache.spark.ml.param.LongParam","JavaType":"java.lang.Long"},{"name":"cacheNodeIds","value":"false","doc":"If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.","ParamType":"org.apache.spark.ml.param.BooleanParam","JavaType":"java.lang.Boolean"},{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"lossType","value":"logistic","doc":"Loss function which GBT tries to minimize (case-insensitive). Supported options: logistic","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"featureSubsetStrategy","value":"all","doc":"The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n].","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"maxIter","value":"20","doc":"maximum number of iterations (>= 0)","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"impurity","value":"gini","doc":"Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"checkpointInterval","value":"10","doc":"set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"minInfoGain","value":"0.0","doc":"Minimum information gain for a split to be considered at a tree node.","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"maxDepth","value":"5","doc":"Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"minInstancesPerNode","value":"1","doc":"Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"},{"name":"maxMemoryInMB","value":"256","doc":"Maximum memory in MB allocated to histogram aggregation.","ParamType":"org.apache.spark.ml.param.IntParam","JavaType":"java.lang.Integer"}]},{"id":"org.apache.spark.ml.classification.NaiveBayes","name":"NaiveBayes","parameters":[{"name":"modelType","value":"multinomial","doc":"The model type which is a string (case-sensitive). Supported options: multinomial (default) and bernoulli.","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"smoothing","value":"1.0","doc":"The smoothing parameter.","ParamType":"org.apache.spark.ml.param.DoubleParam","JavaType":"java.lang.Double"},{"name":"labelCol","value":"label","doc":"label column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"featuresCol","value":"features","doc":"features column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"predictionCol","value":"prediction","doc":"prediction column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"probabilityCol","value":"probability","doc":"Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"},{"name":"rawPredictionCol","value":"rawPrediction","doc":"raw prediction (a.k.a. confidence) column name","ParamType":"org.apache.spark.ml.param.Param","JavaType":"java.lang.String"}]}]}